{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "460cee8b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-04-14T13:13:12.542659Z",
     "iopub.status.busy": "2025-04-14T13:13:12.542048Z",
     "iopub.status.idle": "2025-04-14T13:13:15.017630Z",
     "shell.execute_reply": "2025-04-14T13:13:15.016375Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 2.485605,
     "end_time": "2025-04-14T13:13:15.020127",
     "exception": false,
     "start_time": "2025-04-14T13:13:12.534522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'temperature': 2063.15, 'fO2': 1.8032999999999997e-06, 'radius': array([0.00085 , 0.000835, 0.00084 , 0.000815, 0.00082 ]), 'mean_radius': 0.0008320000000000001, 'std_radius': 1.288409872672513e-05, 'weight': array([7.77661711e-06, 7.37213647e-06, 7.50536466e-06, 6.85498906e-06,\n",
      "       6.98193010e-06]), 'mean_weight': 7.298207479807872e-06, 'std_weight': 3.387415884143756e-07, 't': 36, 'composition': {'element': 'Ce', 'mean': 236.35392662985436, 'std_dev': 1.165167412497055, 'mean_ho': 215.26406794643123, 'std_dev_ho': 1.6168646997127742}}\n",
      "{'temperature': 2268.15, 'fO2': 1.0722e-06, 'radius': array([0.00089, 0.00091, 0.00091, 0.00089, 0.00087]), 'mean_radius': 0.000894, 'std_radius': 1.496662954709577e-05, 'weight': array([8.92696762e-06, 9.54241097e-06, 9.54241097e-06, 8.92696762e-06,\n",
      "       8.33857228e-06]), 'mean_weight': 9.055465890166195e-06, 'std_weight': 4.5192722408630476e-07, 't': 32, 'composition': {'element': 'Ce', 'mean': 214.73848265191822, 'std_dev': 2.2469960960925173, 'mean_ho': 216.21523916451832, 'std_dev_ho': 1.5847320221380343}}\n",
      "{'temperature': 2458.15, 'fO2': 2.8982e-07, 'radius': array([0.000805, 0.000815, 0.000795, 0.00082 , 0.00077 ]), 'mean_radius': 0.000801, 'std_radius': 1.7720045146669355e-05, 'weight': array([6.60574159e-06, 6.85498906e-06, 6.36261032e-06, 6.98193010e-06,\n",
      "       5.78104187e-06]), 'mean_weight': 6.5172625892844175e-06, 'std_weight': 4.251451200829843e-07, 't': 22, 'composition': {'element': 'Ce', 'mean': 213.11213203308097, 'std_dev': 1.3205964678800148, 'mean_ho': 205.25475821843332, 'std_dev_ho': 1.3164424914230999}}\n",
      "{'temperature': 2653.15, 'fO2': 5.4728000000000005e-08, 'radius': array([0.000735, 0.000725, 0.00071 , 0.000745, 0.000715]), 'mean_radius': 0.000726, 'std_radius': 1.2806248474865685e-05, 'weight': array([5.02800796e-06, 4.82556266e-06, 4.53219916e-06, 5.23603762e-06,\n",
      "       4.62862573e-06]), 'mean_weight': 4.850086624794931e-06, 'std_weight': 2.574152153033386e-07, 't': 24, 'composition': {'element': 'Ce', 'mean': 206.52227203912676, 'std_dev': 0.9864332749295259, 'mean_ho': 232.9976069929902, 'std_dev_ho': 1.5677151815729289}}\n",
      "{'temperature': 2833.15, 'fO2': 1.2892999999999998e-08, 'radius': array([0.000835, 0.000805, 0.000795, 0.00084 , 0.00082 ]), 'mean_radius': 0.000819, 'std_radius': 1.7146428199482245e-05, 'weight': array([7.37213647e-06, 6.60574159e-06, 6.36261032e-06, 7.50536466e-06,\n",
      "       6.98193010e-06]), 'mean_weight': 6.965556628312812e-06, 'std_weight': 4.358850938812584e-07, 't': 21, 'composition': {'element': 'Ce', 'mean': 210.354168466675, 'std_dev': 0.9654696838440924, 'mean_ho': 262.6689134429033, 'std_dev_ho': 1.2234046976031343}}\n",
      "{'temperature': 2263.15, 'fO2': 0.025543, 'radius': array([0.00074 , 0.00074 , 0.000735, 0.00074 , 0.00074 ]), 'mean_radius': 0.0007390000000000001, 'std_radius': 2.0000000000000054e-06, 'weight': [5.14e-06, 5.09e-06, 5.12e-06], 'mean_weight': 5.116666666666667e-06, 'std_weight': 2.0548046676563058e-08, 't': 90, 'composition': {'element': 'Ce', 'mean': 169.77824234887433, 'std_dev': 1.4120904064082391, 'mean_ho': 208.04634388874476, 'std_dev_ho': 2.7513127801025012}}\n",
      "{'temperature': 2483.15, 'fO2': 0.055873, 'radius': array([0.000755, 0.00074 , 0.000745, 0.000745, 0.000755]), 'mean_radius': 0.000748, 'std_radius': 6.000000000000015e-06, 'weight': [5.33e-06, 5.31e-06, 5.29e-06], 'mean_weight': 5.309999999999999e-06, 'std_weight': 1.6329931618554365e-08, 't': 97, 'composition': {'element': 'Ce', 'mean': 106.98774170419911, 'std_dev': 1.3310322890100732, 'mean_ho': 203.47807893567668, 'std_dev_ho': 1.6391464064572607}}\n",
      "{'temperature': 2673.15, 'fO2': 0.09275399999999999, 'radius': array([0.00075 , 0.00074 , 0.00075 , 0.000745, 0.00075 ]), 'mean_radius': 0.0007469999999999999, 'std_radius': 4.000000000000011e-06, 'weight': [5.32e-06, 5.29e-06, 5.29e-06], 'mean_weight': 5.3e-06, 'std_weight': 1.4142135623730815e-08, 't': 61, 'composition': {'element': 'Ce', 'mean': 55.91165784321494, 'std_dev': 0.929795948284271, 'mean_ho': 199.42719106488178, 'std_dev_ho': 0.9383576932371419}}\n",
      "{'temperature': 2893.15, 'fO2': 0.1386, 'radius': array([0.000885, 0.000885, 0.00089 , 0.000885, 0.000885]), 'mean_radius': 0.000886, 'std_radius': 1.999999999999962e-06, 'weight': [8.71e-06, 8.73e-06, 8.66e-06], 'mean_weight': 8.7e-06, 'std_weight': 2.9439202887759206e-08, 't': 31, 'composition': {'element': 'Ce', 'mean': 74.10031441627143, 'std_dev': 0.7013829265880607, 'mean_ho': 204.9215010165489, 'std_dev_ho': 1.956707067363908}}\n",
      "{'temperature': 2068.15, 'fO2': 0.9989, 'radius': array([0.00088 , 0.000885, 0.000885, 0.00087 , 0.000865]), 'mean_radius': 0.000877, 'std_radius': 8.124038404635982e-06, 'weight': [8.46e-06, 8.54e-06, 8.53e-06], 'mean_weight': 8.51e-06, 'std_weight': 3.559026084010403e-08, 't': 83, 'composition': {'element': 'Ce', 'mean': 201.39243248525455, 'std_dev': 1.1081686678663842, 'mean_ho': 206.06016743825785, 'std_dev_ho': 1.5307733990381869}}\n",
      "{'temperature': 2288.15, 'fO2': 0.99541, 'radius': array([0.00072 , 0.000725, 0.000725, 0.000725, 0.000725]), 'mean_radius': 0.000724, 'std_radius': 1.999999999999962e-06, 'weight': [4.75e-06, 4.76e-06, 4.79e-06], 'mean_weight': 4.766666666666667e-06, 'std_weight': 1.6996731711975787e-08, 't': 69, 'composition': {'element': 'Ce', 'mean': 128.09119492429156, 'std_dev': 1.3625857236075263, 'mean_ho': 200.42438670102578, 'std_dev_ho': 2.1475999220026982}}\n",
      "{'temperature': 2498.15, 'fO2': 0.98584, 'radius': array([0.000655, 0.00065 , 0.00065 , 0.00065 , 0.000645]), 'mean_radius': 0.0006500000000000001, 'std_radius': 3.1622776601683877e-06, 'weight': [3.41e-06, 3.52e-06, 3.47e-06], 'mean_weight': 3.4666666666666664e-06, 'std_weight': 4.496912521077355e-08, 't': 55, 'composition': {'element': 'Ce', 'mean': 58.46921976006789, 'std_dev': 2.0538729385206738, 'mean_ho': 199.52261434813911, 'std_dev_ho': 1.7014571030819525}}\n",
      "{'temperature': 2683.15, 'fO2': 0.96715, 'radius': array([0.000855, 0.00086 , 0.00086 , 0.00086 , 0.00086 ]), 'mean_radius': 0.0008590000000000001, 'std_radius': 2.0000000000000054e-06, 'weight': [7.84e-06, 7.88e-06, 7.83e-06], 'mean_weight': 7.85e-06, 'std_weight': 2.1602468994693442e-08, 't': 51, 'composition': {'element': 'Ce', 'mean': 50.395147485571584, 'std_dev': 0.3165792611607552, 'mean_ho': 204.65627642045646, 'std_dev_ho': 1.2607059562347807}}\n",
      "{'temperature': 2873.15, 'fO2': 0.93107, 'radius': array([0.00085 , 0.00085 , 0.00085 , 0.00084 , 0.000845]), 'mean_radius': 0.000847, 'std_radius': 3.999999999999962e-06, 'weight': [7.62e-06, 7.69e-06, 7.68e-06], 'mean_weight': 7.663333333333333e-06, 'std_weight': 3.091206165165205e-08, 't': 33.5, 'composition': {'element': 'Ce', 'mean': 13.403563966076923, 'std_dev': 0.14831166560772152, 'mean_ho': 205.03918502444645, 'std_dev_ho': 1.003076755993476}}\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "\n",
    "#  Mean Density: 3023.05 kg/m³\n",
    "#  Std Deviation: 89.25 kg/m³ \n",
    "\n",
    "MeanDensityCMAST = 3023.05 #kg/m³\n",
    "StdDeviationDensityCMAST = 89.25 #kg/m³\n",
    "\n",
    "\n",
    "\n",
    "# Define the sheet name to load\n",
    "sheet_name = 'Data'  # Replace with the actual sheet name if different\n",
    "\n",
    "# Load the entire sheet into a DataFrame\n",
    "file_path = '/kaggle/input/calculations-argon/240604a_SebastianTE_PS_Calculations_Argon.xlsx'\n",
    "df = pd.read_excel(file_path, sheet_name=sheet_name)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Initialize the data list\n",
    "data = []\n",
    "\n",
    "#Argon Data\n",
    "\n",
    "\n",
    "# 1800 Argon \n",
    "temperature = 1790 + 273.15  # put in C value to get kelvin\n",
    "fO2 = 1.8033 * 10**-6       # Replace with your value calculated using equiweb\n",
    "element = \"Ce\"    # Replace with your element name\n",
    "t = 36 #time of heating in seconds\n",
    "diameter = [0.0017, 0.00167, 0.00168, 0.00163, 0.00164]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = (4 / 3) * np.pi * radius**3 * MeanDensityCMAST\n",
    "measurements = df.iloc[72:81, 66].values  # Accesses row i, column j (Python is 0-indexed) from sheet df\n",
    "measurements_ho = df.iloc[72:81, 90].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append the data to the list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "# 2000 Argon \n",
    "temperature = 1995 + 273.15\n",
    "fO2 = 1.0722 * 10**-6\n",
    "element = \"Ce\"\n",
    "t = 32\n",
    "diameter = [0.00178, 0.00182, 0.00182, 0.00178, 0.00174]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = (4 / 3) * np.pi * radius**3 * MeanDensityCMAST\n",
    "measurements = df.iloc[84:93, 66].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df.iloc[84:93, 90].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "# Repeat for more data points as needed\n",
    "# Example for another set of measurements\n",
    "temperature = 2185 + 273.15\n",
    "fO2 = 2.8982 * 10**-7\n",
    "element = \"Ce\"\n",
    "t = 22\n",
    "diameter = [0.00161, 0.00163, 0.00159, 0.00164, 0.00154]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = (4 / 3) * np.pi * radius**3 * MeanDensityCMAST\n",
    "measurements = df.iloc[96:105, 66].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df.iloc[96:105, 90].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "# Repeat for more data points as needed\n",
    "# Example for another set of measurements\n",
    "temperature = 2380 + 273.15\n",
    "fO2 = 5.4728 * 10**-8\n",
    "element = \"Ce\"\n",
    "t = 24\n",
    "diameter = [0.00147, 0.00145, 0.00142, 0.00149, 0.00143]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = (4 / 3) * np.pi * radius**3 * MeanDensityCMAST\n",
    "measurements = df.iloc[108:117, 66].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df.iloc[108:117, 90].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "# Repeat for more data points as needed\n",
    "\n",
    "temperature = 2560 + 273.15\n",
    "fO2 = 1.2893 * 10**-8\n",
    "element = \"Ce\"\n",
    "t = 21\n",
    "diameter = [0.00167, 0.00161, 0.00159, 0.00168, 0.00164]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = (4 / 3) * np.pi * radius**3 * MeanDensityCMAST\n",
    "measurements = df.iloc[120:129, 66].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df.iloc[120:129, 90].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "#Data CO2&O2#############################################################################################\n",
    "\n",
    "\n",
    "# Define the sheet name to load\n",
    "sheet_name = 'Data'  # Replace with the actual sheet name if different\n",
    "\n",
    "# Load the entire sheet into a DataFrame\n",
    "file_path_CO2_O2 = '/kaggle/input/calculatioan-co2-o2/241204_Paolo_Exp_TE_Calculations_CO2_O2.xlsx'\n",
    "df_CO2_O2 = pd.read_excel(file_path_CO2_O2, sheet_name=sheet_name)\n",
    "\n",
    "# Repeat for more data points as needed\n",
    "\n",
    "\n",
    "\n",
    "#Data CMAST CO2\n",
    "\n",
    "#CO2 2000\n",
    "\n",
    "temperature = 1990 + 273.15\n",
    "fO2 = 2.5543 * 10**-2\n",
    "element = \"Ce\"\n",
    "t = 90\n",
    "diameter = [0.00148, 0.00148, 0.00147, 0.00148, 0.00148]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000514,0.00000509,0.00000512]\n",
    "measurements = df_CO2_O2.iloc[136:145, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[136:145, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "#CO2 2200\n",
    "\n",
    "temperature = 2210 + 273.15\n",
    "fO2 = 5.5873 * 10**-2\n",
    "element = \"Ce\"\n",
    "t = 97\n",
    "diameter = [0.00151, 0.00148, 0.00149, 0.00149, 0.00151]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000533,0.00000531,0.00000529]\n",
    "measurements = df_CO2_O2.iloc[148:157, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[148:157, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "#CO2 2400\n",
    "\n",
    "temperature = 2400 + 273.15\n",
    "fO2 = 9.2754 * 10**-2\n",
    "element = \"Ce\"\n",
    "t = 61\n",
    "diameter = [0.00150, 0.00148, 0.00150, 0.00149, 0.00150]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000532,0.00000529,0.00000529]\n",
    "measurements = df_CO2_O2.iloc[160:169, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[160:169, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "#Frage ist ob 2600 mit 2400 vertauscht wurde bei auswertung, wenn zeit bei 2400 nicht viel viel länger ist dann  measurements wechseln (ist viel längere dauer)\n",
    "\n",
    "\n",
    "#CO2 2600\n",
    "\n",
    "temperature = 2620 + 273.15\n",
    "fO2 = 0.13860\n",
    "element = \"Ce\"\n",
    "t = 31\n",
    "diameter = [0.00177, 0.00177, 0.00178, 0.00177, 0.00177]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000871,0.00000873,0.00000866]\n",
    "measurements = df_CO2_O2.iloc[172:181, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[172:181, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "#O2 1800\n",
    "\n",
    "temperature = 1795 + 273.15\n",
    "fO2 = 0.99890\n",
    "element = \"Ce\"\n",
    "t = 83\n",
    "diameter = [0.00176, 0.00177, 0.00177, 0.00174, 0.00173]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000846,0.00000854,0.00000853]\n",
    "measurements = df_CO2_O2.iloc[184:193, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[184:193, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "#O2 2000\n",
    "\n",
    "temperature = 2015 + 273.15\n",
    "fO2 = 0.99541\n",
    "element = \"Ce\"\n",
    "t = 69\n",
    "diameter = [0.00144, 0.00145, 0.00145, 0.00145, 0.00145]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000475,0.00000476,0.00000479]\n",
    "measurements = df_CO2_O2.iloc[196:205, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[196:205, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "#O2 2200\n",
    "\n",
    "temperature = 2225 + 273.15\n",
    "fO2 = 0.98584\n",
    "element = \"Ce\"\n",
    "t = 55\n",
    "diameter = [0.00131, 0.00130, 0.00130, 0.00130, 0.00129]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000341,0.00000352,0.00000347]\n",
    "measurements = df_CO2_O2.iloc[208:217, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[208:217, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "#O2 2400\n",
    "\n",
    "temperature = 2410 + 273.15\n",
    "fO2 = 0.96715\n",
    "element = \"Ce\"\n",
    "t = 51\n",
    "diameter = [0.00171, 0.00172, 0.00172, 0.00172, 0.00172]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000784,0.00000788,0.00000783]\n",
    "measurements = df_CO2_O2.iloc[220:229, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[220:229, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "#O2 2600\n",
    "\n",
    "temperature = 2600 + 273.15\n",
    "fO2 = 0.93107\n",
    "element = \"Ce\"\n",
    "t = 33.5\n",
    "diameter = [0.00170, 0.00170, 0.00170, 0.00168, 0.00169]\n",
    "radius = np.array(diameter) / 2\n",
    "weight = [0.00000762,0.00000769,0.00000768]\n",
    "measurements = df_CO2_O2.iloc[232:241, 75].values  # Accesses row 2, column 2 (Python is 0-indexed)\n",
    "measurements_ho = df_CO2_O2.iloc[232:241, 99].values  # Accesses row i, column j (Python is 0-indexed) from sheet df Holium normalising\n",
    "\n",
    "# Calculate the mean and standard deviation\n",
    "mean_value = np.mean(measurements)\n",
    "std_dev = np.std(measurements)\n",
    "\n",
    "mean_value_ho = np.mean(measurements_ho)\n",
    "std_dev_ho = np.std(measurements_ho)\n",
    "\n",
    "mean_radius = np.mean(radius)\n",
    "std_radius = np.std(radius)\n",
    "\n",
    "mean_weight = np.mean(weight)\n",
    "std_weight = np.std(weight)\n",
    "\n",
    "# Append to the data list\n",
    "data.append({\n",
    "    \"temperature\": temperature,\n",
    "    \"fO2\": fO2,\n",
    "    \"radius\": radius,\n",
    "        \"mean_radius\": mean_radius,\n",
    "        \"std_radius\": std_radius,\n",
    "    \"weight\": weight,\n",
    "        \"mean_weight\": mean_weight,\n",
    "        \"std_weight\": std_weight,\n",
    "    \"t\":t,\n",
    "    \"composition\": {\n",
    "        \"element\": element,\n",
    "        \"mean\": mean_value,\n",
    "        \"std_dev\": std_dev,\n",
    "        \"mean_ho\": mean_value_ho,\n",
    "        \"std_dev_ho\": std_dev_ho\n",
    "    }\n",
    "})\n",
    "\n",
    "\n",
    "\n",
    "# Print the data to verify\n",
    "for entry in data:\n",
    "    print(entry)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2eba6401",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-14T13:13:15.030928Z",
     "iopub.status.busy": "2025-04-14T13:13:15.030421Z",
     "iopub.status.idle": "2025-04-14T13:13:17.677586Z",
     "shell.execute_reply": "2025-04-14T13:13:17.676301Z"
    },
    "papermill": {
     "duration": 2.657346,
     "end_time": "2025-04-14T13:13:17.681920",
     "exception": false,
     "start_time": "2025-04-14T13:13:15.024574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Fit for Reaction A:\n",
      "  Slope     = -264.99 J/(mol·K)\n",
      "  Intercept = 5976.98 J/mol\n",
      "\n",
      "Linear Fit for Reaction B:\n",
      "  Slope     = 179.01 J/(mol·K)\n",
      "  Intercept = 256434.86 J/mol\n"
     ]
    }
   ],
   "source": [
    "#For Paolo: In this block of code the Gibbs free energy of each reaction is calculated using the formula that uses the Heatcapaity Cp to determine H and S\n",
    "\n",
    "\n",
    "\n",
    "#Calculating the Gibbs free Energy of the 2 reactions\n",
    "\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.integrate import quad\n",
    "import scipy.integrate as spi\n",
    "\n",
    "# -------------------------------\n",
    "# Constants and Data (SI units)\n",
    "# -------------------------------\n",
    "T_ref = 298.15  # Reference temperature in K\n",
    "\n",
    "# Gas species (CeO₂(g), O₂(g), CeO(g) if needed)\n",
    "# Standard formation values at 298.15 K\n",
    "H0_CeO2_g = -538e3       # CeO2(g): Formation enthalpy [J/mol]\n",
    "S0_CeO2_g = 274.417      # CeO2(g): Formation entropy [J/(K·mol)]\n",
    "H0_O2_g   = 0        # O2(g): Formation enthalpy [J/mol]\n",
    "S0_O2_g   = 205.152         # O2(g): Formation entropy [J/(K·mol)]\n",
    "\n",
    "# Liquid (or solid extrapolated) species:\n",
    "# CeO2(sol)\n",
    "H0_CeO2_sol = -1086.596e3  # [J/mol]\n",
    "S0_CeO2_sol = 62.29      # [J/(K·mol)]\n",
    "# Ce2O3(sol) (used to approximate CeO1.5(l) as 1/2 * Ce2O3(sol))\n",
    "H0_Ce2O3_sol = -1788.745e3 # [J/mol]\n",
    "S0_Ce2O3_sol = 148.1    # [J/(K·mol)]\n",
    "\n",
    "# Fusion (latent heat) parameters\n",
    "# For Ce2O3(l)\n",
    "DeltaH_fus_Ce2O3 = 85e3   # J/mol\n",
    "T_m_Ce2O3 = 2450         # K\n",
    "# For CeO2(l)\n",
    "DeltaH_fus_CeO2 = 69e3    # J/mol\n",
    "T_m_CeO2 = 2670          # K\n",
    "\n",
    "# -------------------------------\n",
    "# Gas-phase Heat Capacity Functions\n",
    "# -------------------------------\n",
    "# CeO₂(g)\n",
    "def cp_low_CeO2_g(T):\n",
    "    return (37.7646 + 55.1209e-3 * T - 57.1816e-6 * T**2 \n",
    "            + 21.2692e-9 * T**3 - 2.6077e5 * T**-2)\n",
    "\n",
    "def cp_high_CeO2_g(T):\n",
    "    return (55.9864 + 2.90431e-3 * T - 1.4361e-6 * T**2 \n",
    "            + 0.25254e-9 * T**3 - 1.11908e6 * T**-2)\n",
    "\n",
    "def H_CeO2_g(T):\n",
    "    \"\"\"Temperature-dependent enthalpy for CeO₂(g) via integration.\"\"\"\n",
    "    H298 = H0_CeO2_g\n",
    "    bp = 900\n",
    "    if T <= bp:\n",
    "        integral, _ = spi.quad(cp_low_CeO2_g, T_ref, T)\n",
    "    else:\n",
    "        int_low, _ = spi.quad(cp_low_CeO2_g, T_ref, bp)\n",
    "        int_high, _ = spi.quad(cp_high_CeO2_g, bp, T)\n",
    "        integral = int_low + int_high\n",
    "    return H298 + integral\n",
    "\n",
    "def S_CeO2_g(T):\n",
    "    \"\"\"Temperature-dependent entropy for CeO₂(g) via integration.\"\"\"\n",
    "    S298 = S0_CeO2_g\n",
    "    bp = 900\n",
    "    if T <= bp:\n",
    "        integral, _ = spi.quad(lambda Tp: cp_low_CeO2_g(Tp)/Tp, T_ref, T)\n",
    "    else:\n",
    "        int_low, _ = spi.quad(lambda Tp: cp_low_CeO2_g(Tp)/Tp, T_ref, bp)\n",
    "        int_high, _ = spi.quad(lambda Tp: cp_high_CeO2_g(Tp)/Tp, bp, T)\n",
    "        integral = int_low + int_high\n",
    "    return S298 + integral\n",
    "\n",
    "def G_CeO2_g(T):\n",
    "    return H_CeO2_g(T) - T * S_CeO2_g(T)\n",
    "\n",
    "# O₂(g)\n",
    "def cp_low_O2(T):\n",
    "    return (31.32234 - 20.23531e-3 * T + 57.86644e-6 * T**2 \n",
    "            - 36.50624e-9 * T**3 - 0.007374e6 * T**-2)\n",
    "\n",
    "def cp_middle_O2(T):\n",
    "    return (30.03235 + 8.772972e-3 * T - 3.988133e-6 * T**2 \n",
    "            + 0.788313e-9 * T**3 - 0.741599e6 * T**-2)\n",
    "\n",
    "def cp_high_O2(T):\n",
    "    return (20.91111 + 10.72071e-3 * T - 2.020498e-6 * T**2 \n",
    "            + 0.146449e-9 * T**3 + 9.245722e6 * T**-2)\n",
    "\n",
    "def H_O2(T):\n",
    "    H298 = H0_O2_g\n",
    "    if T <= 700:\n",
    "        integral, _ = spi.quad(cp_low_O2, T_ref, T)\n",
    "        return H298 + integral\n",
    "    elif T <= 2000:\n",
    "        int_low, _ = spi.quad(cp_low_O2, T_ref, 700)\n",
    "        int_middle, _ = spi.quad(cp_middle_O2, 700, T)\n",
    "        return H298 + int_low + int_middle\n",
    "    else:\n",
    "        int_low, _ = spi.quad(cp_low_O2, T_ref, 700)\n",
    "        int_middle, _ = spi.quad(cp_middle_O2, 700, 2000)\n",
    "        int_high, _ = spi.quad(cp_high_O2, 2000, T)\n",
    "        return H298 + int_low + int_middle + int_high\n",
    "\n",
    "def S_O2(T):\n",
    "    S298 = S0_O2_g\n",
    "    if T <= 700:\n",
    "        integral, _ = spi.quad(lambda Tp: cp_low_O2(Tp)/Tp, T_ref, T)\n",
    "        return S298 + integral\n",
    "    elif T <= 2000:\n",
    "        int_low, _ = spi.quad(lambda Tp: cp_low_O2(Tp)/Tp, T_ref, 700)\n",
    "        int_middle, _ = spi.quad(lambda Tp: cp_middle_O2(Tp)/Tp, 700, T)\n",
    "        return S298 + int_low + int_middle\n",
    "    else:\n",
    "        int_low, _ = spi.quad(lambda Tp: cp_low_O2(Tp)/Tp, T_ref, 700)\n",
    "        int_middle, _ = spi.quad(lambda Tp: cp_middle_O2(Tp)/Tp, 700, 2000)\n",
    "        int_high, _ = spi.quad(lambda Tp: cp_high_O2(Tp)/Tp, 2000, T)\n",
    "        return S298 + int_low + int_middle + int_high\n",
    "\n",
    "def G_O2_g(T):\n",
    "    return H_O2(T) - T * S_O2(T)\n",
    "\n",
    "# -------------------------------\n",
    "# Liquid-phase Functions (using numerical integration)\n",
    "# -------------------------------\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def cp_low_CeO2_sol(T):\n",
    "    return (74.4814 + 5.83682e-3 * T - 1.29710e6 / T**2)\n",
    "\n",
    "def cp_middle_CeO2_sol(T):\n",
    "    return (120.0)\n",
    "\n",
    "\n",
    "def H_CeO2_sol(T):\n",
    "    H298 = H0_CeO2_sol  # [J/mol]\n",
    "    if T <= T_m_CeO2:\n",
    "        integral, _ = spi.quad(cp_low_CeO2_sol, T_ref, T)\n",
    "        return H298 + integral\n",
    "    else:\n",
    "        int_low, _ = spi.quad(cp_low_CeO2_sol, T_ref, T_m_CeO2)\n",
    "        int_middle, _ = spi.quad(cp_middle_CeO2_sol, T_m_CeO2, T)\n",
    "        return H298 + int_low + int_middle\n",
    "\n",
    "def S_CeO2_sol(T):\n",
    "    S298 = S0_CeO2_sol      # [J/(K·mol)]\n",
    "    if T <= T_m_CeO2:\n",
    "        integral, _ = spi.quad(lambda Tp: cp_low_CeO2_sol(Tp)/Tp, T_ref, T)\n",
    "        return S298 + integral\n",
    "    else:\n",
    "        int_low, _ = spi.quad(lambda Tp: cp_low_CeO2_sol(Tp)/Tp, T_ref, T_m_CeO2)\n",
    "        int_middle, _ = spi.quad(lambda Tp: cp_middle_CeO2_sol(Tp)/Tp, T_m_CeO2, T)\n",
    "        return S298 + int_low + int_middle \n",
    "\n",
    "def G_CeO2_sol(T):\n",
    "    return H_CeO2_sol(T) - T * S_CeO2_sol(T)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def cp_low_Ce2O3_sol(T):\n",
    "    return (113.736 + 28.4344e-3 * T - 0.641205e6 / T**2)\n",
    "\n",
    "def cp_middle_Ce2O3_sol(T):\n",
    "    return (145.0)\n",
    "\n",
    "def cp_high_Ce2O3_sol(T):\n",
    "    return (157.0)\n",
    "\n",
    "\n",
    "\n",
    "def H_Ce2O3_sol(T):\n",
    "    H298 = H0_Ce2O3_sol\n",
    "    if T <= 1200:\n",
    "        integral, _ = spi.quad(cp_low_Ce2O3_sol, T_ref, T)\n",
    "        return H298 + integral\n",
    "    elif T <= T_m_Ce2O3:\n",
    "        int_low, _ = spi.quad(cp_low_Ce2O3_sol, T_ref, 1200)\n",
    "        int_middle, _ = spi.quad(cp_middle_Ce2O3_sol, 1200, T)\n",
    "        return H298 + int_low + int_middle\n",
    "    else:\n",
    "        int_low, _ = spi.quad(cp_low_Ce2O3_sol, T_ref, 1200)\n",
    "        int_middle, _ = spi.quad(cp_middle_Ce2O3_sol, 1200, T_m_Ce2O3)\n",
    "        int_high, _ = spi.quad(cp_high_Ce2O3_sol, T_m_Ce2O3, T)\n",
    "        return H298 + int_low + int_middle + int_high\n",
    "\n",
    "def S_Ce2O3_sol(T):\n",
    "    S298 = S0_Ce2O3_sol     # [J/(K·mol)]\n",
    "    if T <= 1200:\n",
    "        integral, _ = spi.quad(lambda Tp: cp_low_Ce2O3_sol(Tp)/Tp, T_ref, T)\n",
    "        return S298 + integral\n",
    "    elif T <= T_m_Ce2O3:\n",
    "        int_low, _ = spi.quad(lambda Tp: cp_low_Ce2O3_sol(Tp)/Tp, T_ref, 1200)\n",
    "        int_middle, _ = spi.quad(lambda Tp: cp_middle_Ce2O3_sol(Tp)/Tp, 1200, T)\n",
    "        return S298 + int_low + int_middle\n",
    "    else:\n",
    "        int_low, _ = spi.quad(lambda Tp: cp_low_Ce2O3_sol(Tp)/Tp, T_ref, 1200)\n",
    "        int_middle, _ = spi.quad(lambda Tp: cp_middle_Ce2O3_sol(Tp)/Tp, 1200, T_m_Ce2O3)\n",
    "        int_high, _ = spi.quad(lambda Tp: cp_high_Ce2O3_sol(Tp)/Tp, T_m_Ce2O3, T)\n",
    "        return S298 + int_low + int_middle + int_high\n",
    "\n",
    "def G_Ce2O3_sol(T):\n",
    "    return H_Ce2O3_sol(T) - T * S_Ce2O3_sol(T)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def DeltaG_fus(DeltaH_fus, T_m, T):\n",
    "    return DeltaH_fus * (1 - T/T_m)\n",
    "\n",
    "\n",
    "# -------------------------------\n",
    "# Reaction Functions\n",
    "# -------------------------------\n",
    "def G_CeO15_l(T):\n",
    "    # Approximating CeO1.5(soll) as 1/2 Ce2O3(sol) \n",
    "    return 0.5 * (G_Ce2O3_sol(T) + DeltaG_fus(DeltaH_fus_Ce2O3, T_m_Ce2O3, T))\n",
    "\n",
    "def G_CeO2_l(T):\n",
    "    return 0.5 * (G_CeO2_sol(T) + DeltaG_fus(DeltaH_fus_CeO2, T_m_CeO2, T))\n",
    "\n",
    "def G_rxn_A_func(T):\n",
    "    #this is reaction A6= A\n",
    "    return G_CeO2_g(T) - G_CeO2_l(T)\n",
    "\n",
    "def G_rxn_B_func(T):\n",
    "    #this is reaction A1=react B in this document\n",
    "    return G_CeO2_l(T) - (G_CeO15_l(T) + 0.25 * G_O2_g(T)) \n",
    "\n",
    "# -------------------------------\n",
    "# Linear Fit over 2000K to 3000K\n",
    "# -------------------------------\n",
    "T_values = np.linspace(2200, 2900, 1000)\n",
    "G_A_values = np.array([G_rxn_A_func(T_val) for T_val in T_values])\n",
    "G_B_values = np.array([G_rxn_B_func(T_val) for T_val in T_values])\n",
    "\n",
    "# Linear fit (first-order polynomial)\n",
    "fit_A = np.polyfit(T_values, G_A_values, 1)\n",
    "fit_B = np.polyfit(T_values, G_B_values, 1)\n",
    "fit_A_func = np.poly1d(fit_A)\n",
    "fit_B_func = np.poly1d(fit_B)\n",
    "\n",
    "# -------------------------------\n",
    "# Plotting: Scatter dots and Linear Fit Lines\n",
    "# -------------------------------\n",
    "plt.figure(figsize=(10, 6))\n",
    "# Scatter plot data\n",
    "plt.scatter(T_values, G_A_values/1e3, s=5, color='red', alpha=0.5, label='Reaction A Data')\n",
    "plt.scatter(T_values, G_B_values/1e3, s=5, color='blue', alpha=0.5, label='Reaction B Data')\n",
    "# Linear fit lines\n",
    "plt.plot(T_values, fit_A_func(T_values)/1e3, color='darkred', linewidth=2,\n",
    "         label=f'Fit A: slope={fit_A[0]:.2f} J/(mol·K), intercept={fit_A[1]:.2f} J/mol')\n",
    "plt.plot(T_values, fit_B_func(T_values)/1e3, color='darkblue', linewidth=2,\n",
    "         label=f'Fit B: slope={fit_B[0]:.2f} J/(mol·K), intercept={fit_B[1]:.2f} J/mol')\n",
    "plt.xlabel('Temperature (K)')\n",
    "plt.ylabel('ΔG (kJ/mol)')\n",
    "plt.title('Linear Fit of Reaction Gibbs Free Energy vs Temperature')\n",
    "plt.legend()\n",
    "plt.grid(True, linestyle='--', alpha=0.6)\n",
    "plt.tight_layout()\n",
    "plt.savefig('Linear_Fit_Gibbs_Energy.png', dpi=300)\n",
    "plt.show()\n",
    "\n",
    "# -------------------------------\n",
    "# Print Linear Fit Results\n",
    "# -------------------------------\n",
    "print(\"Linear Fit for Reaction A:\")\n",
    "print(f\"  Slope     = {fit_A[0]:.2f} J/(mol·K)\")\n",
    "print(f\"  Intercept = {fit_A[1]:.2f} J/mol\")\n",
    "print(\"\\nLinear Fit for Reaction B:\")\n",
    "print(f\"  Slope     = {fit_B[0]:.2f} J/(mol·K)\")\n",
    "print(f\"  Intercept = {fit_B[1]:.2f} J/mol\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f8f0befd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-14T13:13:17.696316Z",
     "iopub.status.busy": "2025-04-14T13:13:17.695757Z",
     "iopub.status.idle": "2025-04-14T13:13:25.889189Z",
     "shell.execute_reply": "2025-04-14T13:13:25.887701Z"
    },
    "papermill": {
     "duration": 8.203815,
     "end_time": "2025-04-14T13:13:25.891933",
     "exception": false,
     "start_time": "2025-04-14T13:13:17.688118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "256434.86319478112\n",
      "-179.00975676296005\n",
      "differential_evolution step 1: f(x)= 0.196544206534942\n",
      "differential_evolution step 2: f(x)= 0.19023809665799246\n",
      "differential_evolution step 3: f(x)= 0.1772826063721126\n",
      "differential_evolution step 4: f(x)= 0.132305219482177\n",
      "differential_evolution step 5: f(x)= 0.12647866663291055\n",
      "differential_evolution step 6: f(x)= 0.12647866663291055\n",
      "differential_evolution step 7: f(x)= 0.12647866663291055\n",
      "differential_evolution step 8: f(x)= 0.12374689647718687\n",
      "differential_evolution step 9: f(x)= 0.12369644258761889\n",
      "differential_evolution step 10: f(x)= 0.12369644258761889\n",
      "differential_evolution step 11: f(x)= 0.12369644258761889\n",
      "differential_evolution step 12: f(x)= 0.12369644258761889\n",
      "differential_evolution step 13: f(x)= 0.1236962738589899\n",
      "differential_evolution step 14: f(x)= 0.1236962738589899\n",
      "differential_evolution step 15: f(x)= 0.1236962738589899\n",
      "differential_evolution step 16: f(x)= 0.12364305493443603\n",
      "differential_evolution step 17: f(x)= 0.12363430077777064\n",
      "differential_evolution step 18: f(x)= 0.12363430077777064\n",
      "differential_evolution step 19: f(x)= 0.12361086717873106\n",
      "differential_evolution step 20: f(x)= 0.12361086717873106\n",
      "differential_evolution step 21: f(x)= 0.12360898291512913\n",
      "differential_evolution step 22: f(x)= 0.12360860998449061\n",
      "differential_evolution step 23: f(x)= 0.12360736120592425\n",
      "differential_evolution step 24: f(x)= 0.1236071058533774\n",
      "differential_evolution step 25: f(x)= 0.1236071058533774\n",
      "differential_evolution step 26: f(x)= 0.1236071058533774\n",
      "differential_evolution step 27: f(x)= 0.1236071058533774\n",
      "Polishing solution with 'L-BFGS-B'\n",
      "Optimization terminated successfully.\n",
      "         Current function value: 0.123607\n",
      "         Iterations: 127\n",
      "         Function evaluations: 288\n",
      "Best-fit Sa: 197.6075590066093\n",
      "Best-fit Ha: -31574.142642244202\n",
      "Best-fit Sb: 413.7249864873113\n",
      "Best-fit Hb: -414561.9195455987\n",
      "Best loss: 0.12360708662854766\n"
     ]
    }
   ],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from scipy.optimize import minimize\n",
    "\n",
    "# Universal gas constant\n",
    "R = 8.314  # J/(mol·K)\n",
    "\n",
    "# -------------------------------\n",
    "# Linear fit parameters (calculated) for each reaction:\n",
    "# Reaction A (CeO1.5(l) -> CeO2(g))\n",
    "dH_calc_A = fit_A[1]   # J/mol\n",
    "dS_calc_A = -fit_A[0]       # J/(mol·K)\n",
    "#print(dS_calc_A)\n",
    "\n",
    "# Reaction B (CeO2(l) -> CeO2(g))\n",
    "dH_calc_B = fit_B[1]  # J/mol\n",
    "print(dH_calc_B)\n",
    "dS_calc_B = -fit_B[0]       # J/(mol·K)\n",
    "print(dS_calc_B)\n",
    "\n",
    "\n",
    "\n",
    "    #old#exponent = (- ((Ka / fO2 ** (-1 / 4)) + Kb) * 3 / (r * rho) * (M / (2 * np.pi * R * T)) ** (1 / 2) * (t - t0))\n",
    "\n",
    "\n",
    "# Define the model function\n",
    "def model(X0, Sa, Ha, fO2, Sb, Hb, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B):\n",
    "    Ka = np.exp((T * Sa - Ha) / (R * T))  # Updated Ka is K4*=a*y*K4 in the new formula\n",
    "    Kb = np.exp((T * Sb - Hb) / (R * T))  # Updated Kb is K12*=a*y*K12 in the new formula\n",
    "    #This id formula (14) where K12 is equal to: np.exp((- dH_calc_B + T * dS_calc_B)/(R*T) \n",
    "\n",
    "    \n",
    "    exponent = - (Ka/((np.exp((- dH_calc_B + T * dS_calc_B)/(R*T)))**(-1) * ((fO2) ** (-1 / 4))) * (10**5) * 0.75 * 3 / (r * rho) * (M / (2 * np.pi * R * T)) ** (1 / 2) * (t - t0))\n",
    "    return X0 * np.exp(exponent)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Define the loss function\n",
    "def loss_function(params, ratio, fO2_values, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B):\n",
    "    Sa, Ha, Sb, Hb = params  # Unpack parameters\n",
    "    # Predicted values using the model\n",
    "    X_predicted = model(1.0, Sa, Ha, fO2_values, Sb, Hb, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B)\n",
    "    # Calculate quadratic loss\n",
    "    loss = np.sum((X_predicted - ratio) ** 2)\n",
    "    return loss\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "# Function to fit (Sa, Ha, Sb, Hb) to minimize loss\n",
    "def fit_ratio(ratio, fO2_values, r, rho, M, R, T, t, t0):\n",
    "    # Initial guesses for Sa, Ha, Sb, Hb\n",
    "    initial_guess = [120, 214233, 110, 230085]  # Example guesses, adjust as needed\n",
    "    \n",
    "    # Optimize parameters using scipy.optimize.minimize\n",
    "    result = minimize(\n",
    "    fun=loss_function,  # The loss function to minimize\n",
    "    x0=initial_guess,   # Initial guesses for the parameters\n",
    "    args=(ratio, fO2_values, r, rho, M, R, T, t, t0),  # Additional arguments passed to the loss function\n",
    "    method=\"Nelder-Mead\",      # Optimization method\n",
    "    options={\"disp\": True}  # Display convergence messages\n",
    "    )\n",
    "\n",
    "    \n",
    "    # Extract results and return them\n",
    "    Sa, Ha, Sb, Hb = result.x  # Optimized parameters\n",
    "    return Sa, Ha, Sb, Hb, result.fun  # Include loss for validation purposes\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "#new try for function fitting hybrid fitting, desperation\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "from scipy.optimize import differential_evolution, minimize\n",
    "\n",
    "def hybrid_fit_ratio(ratio, fO2_values, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B,\n",
    "                     bounds=[(-500, 500), (-1000000, 1000000), (-500, 500), (-1000000, 1000000)],\n",
    "                     global_options={'maxiter': 1000000000, 'popsize': 500, 'disp': True},\n",
    "                     local_options={\"disp\": True, \"maxiter\": 100000}):\n",
    "    \"\"\"\n",
    "    Hybrid global-to-local optimization for parameters (Sa, Ha, Sb, Hb) minimizing loss_function.\n",
    "    \n",
    "    Parameters:\n",
    "      ratio, fO2_values, r, rho, M, R, T, t, t0:\n",
    "          Additional arguments to be passed to loss_function.\n",
    "      bounds:\n",
    "          A list of tuples defining the lower and upper bounds for each parameter.\n",
    "          Default: [(-1000, 1000), (-800000, 800000), (100, 1000), (30000, 500000)]\n",
    "      global_options:\n",
    "          Options for the global optimizer (Differential Evolution).\n",
    "      local_options:\n",
    "          Options for the local optimizer (Nelder-Mead).\n",
    "    \n",
    "    Returns:\n",
    "      A tuple: (Sa, Ha, Sb, Hb, loss) where loss is the minimized loss value.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Global optimization using Differential Evolution\n",
    "    global_result = differential_evolution(\n",
    "        loss_function,\n",
    "        bounds=bounds,\n",
    "        args=(ratio, fO2_values, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B),\n",
    "        strategy='best1bin',\n",
    "        **global_options\n",
    "    )\n",
    "    \n",
    "    # Local refinement using the result of global optimization as the starting point\n",
    "    local_result = minimize(\n",
    "        loss_function,\n",
    "        x0=global_result.x,\n",
    "        args=(ratio, fO2_values, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B),\n",
    "        method=\"Nelder-Mead\",\n",
    "        options=local_options\n",
    "    )\n",
    "    \n",
    "    # Extract and return optimized parameters and loss value\n",
    "    Sa, Ha, Sb, Hb = local_result.x\n",
    "    return Sa, Ha, Sb, Hb, local_result.fun\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Constants and Values\n",
    "if __name__ == \"__main__\":\n",
    "    # Define constants\n",
    "    rho = 3023.05  # Density in kg/m^3\n",
    "    M = 0.140116  # Molar mass of evaporating species Cerium in kg/mol\n",
    "    R = 8.314  # Gas constant in J/(mol·K)\n",
    "    t0 = 0.0  # Initial time in seconds\n",
    "    \n",
    "    # Extract data (assumes `data` is predefined elsewhere)\n",
    "    fO2_values = np.array([entry[\"fO2\"] for entry in data])  # fO2 values\n",
    "    X_observed = np.array([entry[\"composition\"][\"mean\"] for entry in data])  # Observed Ce PPM values\n",
    "    X_observed_std_dev = np.array([entry[\"composition\"][\"std_dev\"] for entry in data])  # Observed Ce PPM standart deviation\n",
    "    X_holium = np.array([entry[\"composition\"][\"mean_ho\"] for entry in data])  # Observed ho PPM values\n",
    "    X_holium_std_dev = np.array([entry[\"composition\"][\"std_dev_ho\"] for entry in data])  # Observed Ho PPM standart deviation\n",
    "    T = np.array([entry[\"temperature\"] for entry in data])\n",
    "    r = np.array([entry[\"mean_radius\"] for entry in data])\n",
    "    t = np.array([entry[\"t\"] for entry in data])\n",
    "    \n",
    "    # Calculate normalized ratio\n",
    "    ratio = (X_observed / X_observed[0]) / (X_holium / X_holium[0])\n",
    "    \n",
    "    # Fit the data to find best-fit parameters\n",
    "    best_Sa, best_Ha, best_Sb, best_Hb, best_loss = hybrid_fit_ratio(ratio, fO2_values, r, rho, M, R, T, t, t0,dH_calc_B,dS_calc_B)\n",
    "\n",
    "    # Output results\n",
    "    print(f\"Best-fit Sa: {best_Sa}\")\n",
    "    print(f\"Best-fit Ha: {best_Ha}\")\n",
    "    print(f\"Best-fit Sb: {best_Sb}\")\n",
    "    print(f\"Best-fit Hb: {best_Hb}\")\n",
    "    print(f\"Best loss: {best_loss}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4a424d8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-14T13:13:25.909906Z",
     "iopub.status.busy": "2025-04-14T13:13:25.909112Z",
     "iopub.status.idle": "2025-04-14T13:13:27.422026Z",
     "shell.execute_reply": "2025-04-14T13:13:27.420993Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 1.526287,
     "end_time": "2025-04-14T13:13:27.425725",
     "exception": false,
     "start_time": "2025-04-14T13:13:25.899438",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of t: 50.392857142857146\n"
     ]
    }
   ],
   "source": [
    "# 2D Plot: Ratio vs log(fO2)\n",
    "def plot_ratio_vs_logfO2_2d_with_errors(ratio, fO2_values, X_observed_std_dev, X_holium_std_dev, best_Sa, best_Ha, best_Sb, best_Hb, r, rho, M, R, t, t0):\n",
    "    # Compute log(fO2) values\n",
    "    log_fO2 = np.log10(fO2_values)\n",
    "\n",
    "\n",
    "    # Calculate ratio errors (propagation of uncertainty)\n",
    "    ratio_error = np.sqrt((X_observed_std_dev / X_observed)**2 + (X_holium_std_dev / X_holium)**2)\n",
    "\n",
    "\n",
    "    # Plot observed data points\n",
    "    plt.errorbar(log_fO2[0], ratio[0], yerr=ratio_error[0], fmt=\"o\", color=\"Blue\", label=\"2073K\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"blue\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[9], ratio[9], yerr=ratio_error[9], fmt=\"o\", color=\"Blue\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"blue\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[1], ratio[1], yerr=ratio_error[1], fmt=\"o\", color=\"Orange\", label=\"2273K\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"orange\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[5], ratio[5], yerr=ratio_error[5], fmt=\"o\", color=\"Orange\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"orange\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[10], ratio[10], yerr=ratio_error[10], fmt=\"o\", color=\"Orange\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"orange\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[2], ratio[2], yerr=ratio_error[2], fmt=\"o\", color=\"green\", label=\"2473K\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"green\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[6], ratio[6], yerr=ratio_error[6], fmt=\"o\", color=\"green\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"green\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[11], ratio[11], yerr=ratio_error[11], fmt=\"o\", color=\"green\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"green\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[3], ratio[3], yerr=ratio_error[3], fmt=\"o\", color=\"Red\", label=\"2673K\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"red\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[7], ratio[7], yerr=ratio_error[7], fmt=\"o\", color=\"Red\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"red\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[12], ratio[12], yerr=ratio_error[12], fmt=\"o\", color=\"Red\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"red\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[4], ratio[4], yerr=ratio_error[4], fmt=\"o\", color=\"Purple\",label=\"2873K\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"Purple\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[8], ratio[8], yerr=ratio_error[8], fmt=\"o\", color=\"Purple\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"Purple\", alpha=0.9)\n",
    "    plt.errorbar(log_fO2[13], ratio[13], yerr=ratio_error[13], fmt=\"o\", color=\"Purple\", zorder=6,markersize=3,capsize=2, capthick=1, elinewidth=1, ecolor=\"Purple\", alpha=0.9)\n",
    "\n",
    "\n",
    "\n",
    "    # Adding space to the x and y coordinates\n",
    "    x_offset = 0.05  # Adjust this value for horizontal spacing\n",
    "    y_offset = -0.015  # Adjust this value for vertical spacing\n",
    "\n",
    "\n",
    "   \n",
    "\n",
    "    # Add a number next to each point\n",
    "    for i in range(14):\n",
    "        plt.text(log_fO2[i], ratio[i] + y_offset, f\"{int(t[i])}\", color=\"black\", fontsize=8, ha='center', va='top')\n",
    "\n",
    "\n",
    "    # Define the temperature range and a grid of log(fO2) values for the model\n",
    "    temperature_range = np.arange(2073.15, 3073.15, 200)  # 2073.15 K to 2873.15 K\n",
    "    log_fO2_grid = np.linspace(np.log10(np.min(fO2_values)), np.log10(np.max(fO2_values)), 1000)  # 1000 log(fO2) points\n",
    "    fO2_grid = 10 ** log_fO2_grid  # Convert log(fO2) back to fO2 values for model calculations\n",
    "\n",
    "    # Compute the model ratio over the grid and plot for each temperature\n",
    "    for T in temperature_range:\n",
    "        Ka = np.exp((T * best_Sa - best_Ha) / (R * T))  # Compute Ka based on the new formula\n",
    "        Kb = np.exp((T * best_Sb - best_Hb) / (R * T))  # Compute Kb based on the new formula\n",
    "   \n",
    "    \n",
    "        exponent_plot = (- (Ka/(np.exp(101325*(- dH_calc_B + T * dS_calc_B)/(R*T)) * ((fO2_grid) ** (1 / 4))*(Ka/Kb)+1)) * 3 / (r.mean() * rho) * (M / (2 * np.pi * R * T)) ** (1 / 2) * (t.mean() - t0))\n",
    "\n",
    "        #old#exponent_plot = - ((Ka / fO2_grid ** (-1 / 4) + Kb) * 3 / (r.mean() * rho) * (M / (2 * np.pi * R * T))**(1/2) * (t.mean() - t0))\n",
    "        ratio_plot = np.exp(exponent_plot)  # Model ratio\n",
    "        plt.plot(log_fO2_grid, ratio_plot, label=f\"T = {T:.0f} K\", linestyle=\"--\",linewidth=1)\n",
    "\n",
    "    \n",
    "    # Configure the plot\n",
    "    plt.xlabel(\"log(fO2)\")\n",
    "    plt.ylabel(\"Ratio\")\n",
    "    plt.title(r\"Normalized Cerium ratio vs. log($fO_2$) with heating time t [s]\")\n",
    "    plt.legend(ncol=2,fontsize=\"small\",)\n",
    "    plt.grid(True)\n",
    "\n",
    "    plt.savefig(\"CMAST_ratio_vs_logfO2_timeinS_plot_Error.png\", dpi=300, bbox_inches=\"tight\")  # Save the plot\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "# Call the function for the 2D plot with error bars\n",
    "plot_ratio_vs_logfO2_2d_with_errors(\n",
    "    ratio, fO2_values, X_observed_std_dev, X_holium_std_dev, \n",
    "    best_Sa, best_Ha, best_Sb, best_Hb, \n",
    "    r, rho, M, R, t, t0\n",
    ")\n",
    "\n",
    "\n",
    "print(\"Mean of t:\", t.mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c9b2af54",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-14T13:13:27.445103Z",
     "iopub.status.busy": "2025-04-14T13:13:27.444072Z",
     "iopub.status.idle": "2025-04-14T13:13:28.619463Z",
     "shell.execute_reply": "2025-04-14T13:13:28.617940Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 1.18719,
     "end_time": "2025-04-14T13:13:28.622318",
     "exception": false,
     "start_time": "2025-04-14T13:13:27.435128",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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nTuHTp06ITQ0FFOnTkX9+vUREBCAP/74A88880y5umzWlbwfNGjQAD4+Pk6bndlWrZTVVRqqVauGHTt2YM2aNfjuu+/w3XffYdGiRRg0aBA+/PDDq378on5OXXl/cfX14y6e+P1xtZ3aBw0ahE8//RRbtmxBXFwcvv76a4wYMcKlDyv79++PIUOGYMeOHWjZsiVWrlyJbt262X0A0bFjRxw6dAhfffUVfvjhB7z//vuYM2cO3nnnHbuVUqWh6zo0TcN3333n9Hvq6u/Yq/ndW/j3SWnH5Cw3d7xPedPvOZKLRTdRGdN1HYMHD0ZoaChGjx5tXHu64KfiNoWXoiml8NdffxmfjtuOIIaGhhZ7FORa89S4ivpFumrVKiQkJGD27NnGtpycHJeX+g4aNAh33303fvvtNyxfvhytWrWyO+rmKfXr18f58+dL/B599tlnCAgIwJo1a+Dv729sd7Z002QyoVu3bujWrRtef/11TJ8+Hc8//zzWr1+P7t27G0d5Cn9vilu262zcO3fuRLdu3YpdDVCnTh3ouo5Dhw7ZHeXcv3+/S89z55134uOPP8ayZcswYcIEl8dnM3DgQHzwwQcwmUx2yyoLW758OXx9fbF06VKH/yj+8ssveOONN3Ds2DGHI3QF+fr6onnz5jh48KCxnNITevfujU6dOmH69Ol47LHHEBQUhPr16+PHH39E+/btiy0+NmzYgNTUVHz++efo2LGjsb1gcz/g8s/v7t27i31turrUPDIyEpUqVXKa+759+2AymdzyH9igoCB07twZGzduxN9//223NPxKOFsKfODAAYdO57quIzk52ShibfsBsNvXz88Pd955J+68807ouo4RI0bg3XffxYsvvuhwRNYdXH1/cfX1c6244/eHreHhX3/9ZXcUPDU11ekR3J49eyIyMhLLly9HmzZtcPHiRZcbOPbp0wePPfaYscT8wIEDTt+vIiIiMGTIEAwZMgTnz59Hx44dMXny5CsuuuvXrw+lFOrVq2f32vOkgwcP2n0///rrL+i6brzO3TEmV9+ngKLfg67l7zmiovCcbqIy9vrrr2PLli34z3/+g5deegnt2rXD8OHD8c8//zjsu2TJErsOoqtWrcKpU6fQq1cvAEDr1q1Rv359vPbaa06XVLpyiR1P8NS4goKCnBbSZrPZ4VP5N998s8hPtQvr1asXqlat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iLySppRSpb3TTz/9hD59+mDZsmVYuHAh/vrrL/z000+oXr26J8bodTIzM1G5cmVkZGSU25P/lVLIyclBQEBAiV3pqfxjnrIwT1mYpyzMUxbmKQvzlMUb8nS17rui/utdu3bFkiVL0LdvXxw+fBgbN25kwe2F/Pz8ynoI5EbMUxbmKQvzlIV5ysI8ZWGeskjJ06Xl5ffcc4/T7ZGRkQgLC8PQoUONbZ9//rl7RkYepes6EhMTERcX5/XdAIl5SsM8ZWGesjBPWZinLMxTFkl5ulR0V65c2en2+Ph4tw6GiIiIiIiISBKXiu5FixZ5ehxERERERERE4lzROd1EREREREREVDKXupf37NkTkydPxi233FLsfllZWXjrrbcQHByMkSNHum2Q3sZbupfrug6TyVRuuwGS65inLMxTFuYpC/OUhXnKwjxl8YY8Xa37XFpefu+996Jv376oXLky7rzzTtx4442oWbMmAgICkJ6ejj179uCXX37Bt99+i969e2PWrFlumwh5Tl5eHgICAsp6GOQmzFMW5ikL85SFecrCPGVhnrJIydOl5eUPP/wwkpOT8dxzz2HPnj0YOnQoOnTogJtuugnx8fF47733ULt2bfz2229YsWIFateu7elx01XSdR379++HrutlPRRyA+YpC/OUhXnKwjxlYZ6yME9ZJOXp0pFuAPD398cDDzyABx54AACQkZGB7OxsVKlSBb6+vh4bIBEREREREZG3crnoLqxy5cpFXkqMiIiIiIiIiNi9vELz9ovMkz3mKQvzlIV5ysI8ZWGesjBPWaTk6VL3ciodb+heTkRERERERFfO1bqPR7orKKUUMjMzwc9cZGCesjBPWZinLMxTFuYpC/OURVKeLLorKF3XkZycLKIbIDFPaZinLMxTFuYpC/OUhXnKIinPK26klpWVZfepg8lkQnBwsFsGRURERERERCSBy0e6d+zYgdtvv934umbNmggPDzf+hIWF4bfffvPIIImIiIiIiIi8kctHut98803ceuutdtuWLl2K6OhoKKXwwQcf4I033sDSpUvdPkjyjICAgLIeArkR85SFecrCPGVhnrIwT1mYpyxS8nS5e3mTJk3w0UcfoVWrVgCAkJAQ7Ny5E7GxsQCAbdu24b777sPRo0c9N1ovwe7lREREREREsrm9e/nRo0cRGRlpfD116lRUrVrV+LpG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P3iS59SpU0WbNm1EYGCgSEhIEAsWLBBOp1P3OUbP0ySEEE03bk5EREREREREKt7TTUREREREROQlLLqJiIiIiIiIvIRFNxEREREREZGXsOgmIiIiIiIi8hIW3URERERERERewqKbiIiIiIiIyEtYdBMRERERERF5CYtuIiIiIiIiIi9h0U1ERETSmzFjBp544olGved//ud/sGDBAi8dERERtRQsuomIiJqJyWSq9zFr1ixfH2KT69ixI1577TWfHkN+fj4WLVqE559/Xts2fvx43H///br91q1bB6vVqhXa06dPx4svvogrV6405+ESEZFkWHQTERE1k3PnzmmP1157DeHh4bptkydP9vUhekQIgaqqqmb9mpWVlTf83nfeeQcpKSno0KFDvfuMGzcOb775Jp599lkAQO/evdGlSxd88MEHN/y1iYiIWHQTERE1k9jYWO3RunVrmEwm3ba1a9ciMTERVqsVPXr0wNKlS7X35ubmwmQy4eOPP8Zdd92FkJAQDBgwACdOnMC3336L/v37IywsDCNHjsSFCxe096kjurNnz4bdbkd4eDh+//vf64pYp9OJtLQ0dOrUCSEhIejbty/WrVunvZ6ZmQmTyYRNmzbhjjvuQHBwMHbt2oWcnByMHj0abdq0QVhYGAYMGIAtW7Zo7xsyZAh+/PFHTJo0SRvNB4BZs2bhtttu0/2/ee2119CxY8dax/3iiy+ibdu26N69OwDg9OnTeOSRRxAREYGoqCiMHj0aubm59f5/X7t2LUaNGlXn6/Pnz8cf//hHrF27Fo899pjutVGjRmHt2rX1fj4REVF9WHQTERH5gTVr1uCFF17Aiy++iKNHj2LevHmYMWMGVq9erdtv5syZmD59Or777jsEBARg7Nix+POf/4xFixZh586dyM7OxgsvvKB7T0ZGBo4ePYrMzEz89a9/xaefforZs2drr6elpeG9997DW2+9hSNHjmDSpEn45S9/ie3bt+s+57nnnsNLL72Eo0ePok+fPigtLcXPf/5zZGRk4Pvvv8eIESMwatQo5OXlAQA+/fRTxMXFYc6cOdpofmNkZGTg+PHjSE9Px+eff47r168jNTUVNpsNO3fuxNdff42wsDCMGDGizpHwwsJCZGVloX///m5fnzp1KubOnYvPP/8cDzzwQK3Xf/KTn+Bf//oXKioqGnXsREREqgBfHwAREREpxfSCBQvw4IMPAgA6deqErKwsLFu2DP/7v/+r7Td58mSkpqYCAJ566imMGTMGGRkZuPPOOwEAEyZMwKpVq3SfHRQUhBUrViA0NBS9evXCnDlzMGXKFMydOxfXr1/HvHnzsGXLFiQnJwMAOnfujF27dmHZsmUYPHiw9jlz5szBPffcoz2PiopC3759tedz587F+vXr8dlnn+HJJ59EVFQULBYLbDYbYmNjG/3/pFWrVnjnnXcQFBQEAPjggw/gdDrxzjvvaKPmK1euREREBDIzMzF8+PBan5GXlwchBNq2bVvrtU2bNuHvf/87MjIycPfdd7s9hrZt26KyshL5+fn1Tk8nIiKqC4tuIiIiH7t69SpycnIwYcIEPP7449r2qqoqtG7dWrdvnz59tD+3adMGAJCUlKTbVlBQoHtP3759ERoaqj1PTk5GaWkpTp8+jdLSUpSVlemKaUC5h/r222/Xbas5WlxaWopZs2bhiy++wLlz51BVVYVr165pI903KykpSSu4AeDAgQPIzs6GzWbT7VdeXo6cnBy3n3Ht2jUAgNVqrfVanz59cPHiRcycORM/+clPEBYWVmufkJAQAEBZWdkNnwcREbVsLLqJiIh8rLS0FACwfPlyDBw4UPeaxWLRPQ8MDNT+rI721tzmdDob/bW/+OILtGvXTvdacHCw7nmrVq10zydPnoz09HS88sor6Nq1K0JCQvCLX/yiwaZnZrMZQgjdtuvXr9far+bXKy0txR133IE1a9bU2tdut7v9WtHR0QCAoqKiWvu0a9cO69atw89+9jOMGDECmzZtqlXQFxYW1vv5REREDWHRTURE5GNt2rRB27ZtcerUKYwbN67JP//AgQO4du2aNmr7z3/+E2FhYYiPj0dUVBSCg4ORl5enm0ruia+//hrjx4/X7oUuLS2t1dQsKCgIDodDt81utyM/Px9CCO0XB/v372/w6/Xr1w8fffQRYmJiEB4e7tExdunSBeHh4cjKykK3bt1qvd6hQwds375dK7w3b96sK7wPHz6MuLg4rXgnIiJqLDZSIyIi8gOzZ89GWloaXn/9dZw4cQKHDh3CypUrsXDhwpv+7MrKSkyYMAFZWVnYuHEjZs6ciSeffBJmsxk2mw2TJ0/GpEmTsHr1auTk5OC7777D4sWLazVxqykhIQGffvop9u/fjwMHDmDs2LG1Rtk7duyIHTt24OzZs7h48SIApav5hQsXMH/+fOTk5GDJkiXYtGlTg+cxbtw4REdHY/To0di5cyd++OEHZGZm4k9/+hPOnDnj9j1msxnDhg3Drl276vzc+Ph4ZGZmoqCgAKmpqSguLtZe27lzp9t7xYmIiDzFopuIiMgP/Pa3v8U777yDlStXIikpCYMHD8aqVavQqVOnm/7soUOHIiEhAYMGDcKjjz6K++67D7NmzdJenzt3LmbMmIG0tDQkJiZixIgR+OKLLxr82gsXLkRkZCRSUlIwatQopKamol+/frp95syZg9zcXHTp0kWbop2YmIilS5diyZIl6Nu3L/71r395tEZ5aGgoduzYgfbt2+PBBx9EYmIiJkyYgPLy8npHvn/7299i7dq19U67j4uLQ2ZmJi5evKgV3uXl5diwYYPuPnsiIqLGMomaN1URERGRNMaPH4/Lly9jw4YNvj4UnxFCYODAgZg0aRLGjBnj8fvefPNNrF+/Hl999ZUXj46IiGTHkW4iIiKSmslkwttvv42qqqpGvS8wMBCLFy/20lEREVFLwZFuIiIiiXGkm4iIyLdYdBMRERERERF5CaeXExEREREREXkJi24iIiIiIiIiL2HRTUREREREROQlLLqJiIiIiIiIvIRFNxEREREREZGXsOgmIiIiIiIi8hIW3URERERERERewqKbiIiIiIiIyEtYdBMRERERERF5yf8HD6DtEyiSfNQAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visulizing the Reaction Gibbs free energy for experimentally measured values. \n",
    "\n",
    "\n",
    "def G_rxn_A_func(T):\n",
    "    return best_Ha - T * best_Sa\n",
    "\n",
    "def G_rxn_B_func(T):\n",
    "    return best_Hb - T * best_Sb\n",
    "\n",
    "# -------------------------------\n",
    "# Linear Fit over 2000K to 3000K\n",
    "# -------------------------------\n",
    "T_values = np.linspace(2200, 2900, 1000)\n",
    "G_A_values = np.array([G_rxn_A_func(T_val) for T_val in T_values])\n",
    "G_B_values = np.array([G_rxn_B_func(T_val) for T_val in T_values])\n",
    "\n",
    "\n",
    "# -------------------------------\n",
    "# Plotting: Scatter dots and Linear Fit Lines\n",
    "# -------------------------------\n",
    "plt.figure(figsize=(10, 6))\n",
    "# Scatter plot data\n",
    "plt.scatter(T_values, G_A_values/1e3, s=5, color='red', alpha=0.5, label='Reaction A Data')\n",
    "plt.scatter(T_values, G_B_values/1e3, s=5, color='blue', alpha=0.5, label='Reaction B Data')\n",
    "\n",
    "plt.xlabel('Temperature (K)')\n",
    "plt.ylabel('ΔG (kJ/mol)')\n",
    "plt.title('Experimentaly measured CMAST Reaction Gibbs Free Energy vs Temperature')\n",
    "plt.legend()\n",
    "plt.grid(True, linestyle='--', alpha=0.6)\n",
    "plt.tight_layout()\n",
    "plt.savefig('Experimentally_determined_Gibbs_Energy_CMAST.png', dpi=300)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cf29586c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-14T13:13:28.643069Z",
     "iopub.status.busy": "2025-04-14T13:13:28.642596Z",
     "iopub.status.idle": "2025-04-14T13:13:30.151338Z",
     "shell.execute_reply": "2025-04-14T13:13:30.149427Z"
    },
    "papermill": {
     "duration": 1.522083,
     "end_time": "2025-04-14T13:13:30.153913",
     "exception": false,
     "start_time": "2025-04-14T13:13:28.631830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#For Paolo: This block of code uses the experimentally determined gibbs free energy values and the ones calculated from the Cp functions to determine the activity coeficients\n",
    "\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Universal gas constant\n",
    "R = 8.314  # J/(mol·K)\n",
    "\n",
    "# -------------------------------\n",
    "# Linear fit parameters (calculated) for each reaction:\n",
    "# Reaction A (CeO1.5(l) -> CeO2(g))\n",
    "dH_calc_A = fit_A[1]   # J/mol\n",
    "dS_calc_A = -fit_A[0]       # J/(mol·K)\n",
    "#print(dS_calc_A)\n",
    "\n",
    "# Reaction B (CeO2(l) -> CeO2(g))\n",
    "dH_calc_B = fit_B[1]  # J/mol\n",
    "dS_calc_B = -fit_B[0]       # J/(mol·K)\n",
    "\n",
    "# -------------------------------\n",
    "# Experimental (fitted) parameters for CMAST \n",
    "# -------------------------------\n",
    "# For Reaction A:\n",
    "dS_a_exp_CMAST = best_Sa      # J/(mol·K)\n",
    "dH_a_exp_CMAST = best_Ha       # J/mol\n",
    "# For Reaction B:\n",
    "dS_b_exp_CMAST = best_Sb      # J/(mol·K)\n",
    "dH_b_exp_CMAST = best_Hb       # J/mol\n",
    "\n",
    "\n",
    "# -------------------------------\n",
    "# Activity Coefficient Formulas \n",
    "# -------------------------------\n",
    "# The computed equilibrium constants from the methods described earlier can be compared\n",
    "# to the experimentally measured constants via their respective activity coefficients:\n",
    "#\n",
    "#   λ_CeO1.5(ℓ) = (K_a^*) / (K_a)  and  λ_CeO2(ℓ) = (K_b^*) / (K_b)\n",
    "#\n",
    "# where the equilibrium constant is computed as:\n",
    "#   K = (-H + T * S)/RT\n",
    "#\n",
    "# For Reaction A (CeO₁.₅(ℓ)):\n",
    "def lambda_A(T, dH_exp, dS_exp, dH_calc=dH_calc_A, dS_calc=dS_calc_A):\n",
    "    K_calc = np.exp((- dH_calc + T * dS_calc)/(R*T))  # computed equilibrium constant for Reaction A (K_a)\n",
    "    K_exp  = np.exp((- dH_exp + T * dS_exp)/(R*T))    # experimental equilibrium constant for Reaction A (K_a^*)\n",
    "    return K_exp / K_calc\n",
    "\n",
    "# For Reaction B (CeO₂(ℓ)):\n",
    "def lambda_B(T, dH_exp, dS_exp, dH_calc=dH_calc_B, dS_calc=dS_calc_B):\n",
    "    K_calc = np.exp((- dH_calc + T * dS_calc)/(R*T))  # computed equilibrium constant for Reaction B (K_b)\n",
    "    K_exp  = np.exp((- dH_exp + T * dS_exp)/(R*T))    # experimental equilibrium constant for Reaction B (K_b^*)\n",
    "    return (K_exp / K_calc)\n",
    "\n",
    "\n",
    "\n",
    "# -------------------------------\n",
    "# Generate T values and compute activity coefficients\n",
    "# -------------------------------\n",
    "T_vals = np.linspace(2200, 2900, 1000)  # Temperature range\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# CMAST activity coefficients:\n",
    "lambda_A_CMAST = lambda_A(T_vals, dH_a_exp_CMAST, dS_a_exp_CMAST)\n",
    "lambda_B_CMAST = lambda_B(T_vals, dH_b_exp_CMAST, dS_b_exp_CMAST)\n",
    "\n",
    "\n",
    "\n",
    "# -------------------------------\n",
    "# Plotting: 4 subplots (2 for CMAST and 2 for CAT)\n",
    "# -------------------------------\n",
    "fig, axs = plt.subplots(1, 2, figsize=(12, 5), sharex=True)\n",
    "fig.suptitle('Activity Coefficients vs Temperature (2200K - 2900K)')\n",
    "\n",
    "# CMAST Reaction B\n",
    "axs[1].scatter(T_vals, lambda_B_CMAST, s=5, color='blue', alpha=0.5)\n",
    "axs[1].plot(T_vals, lambda_B_CMAST, color='darkblue', linewidth=2)\n",
    "axs[1].set_title('CMAST Reaction B (CeO₂(ℓ))')\n",
    "\n",
    "# CMAST Reaction A\n",
    "axs[0].scatter(T_vals, lambda_A_CMAST, s=5, color='red', alpha=0.5)\n",
    "axs[0].plot(T_vals, lambda_A_CMAST, color='darkred', linewidth=2)\n",
    "axs[0].set_title('CMAST Reaction A (CeO₁.₅(ℓ))')\n",
    "axs[0].set_ylabel('λ')\n",
    "\n",
    "\n",
    "\n",
    "plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n",
    "plt.savefig('Activity_Coefficients.png', dpi=300)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6178213,
     "sourceId": 10031243,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 6422458,
     "sourceId": 10368943,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 22.117568,
   "end_time": "2025-04-14T13:13:30.789203",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-14T13:13:08.671635",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
